#define  _CRT_SECURE_NO_WARNINGS 1 
#include<stdio.h>
#include<string.h>
//假设有两种微生物X和Y，X出生后每隔3分钟分裂一次
//（数目加倍），Y出生后每隔2分钟分裂一次（数目加倍）
//。一个新出生的X，半分钟之后吃掉1个Y，
//且从此开始每隔1分钟吃掉1个Y。已知新出生的X = 10，
//Y = 89，求60分钟后Y的数目。若X = 10，Y = 90呢？
//本题的要求就是写出这两种初始条件下，60分钟后Y的数目。
//题目的结果令你震惊吗？这不是简单的数字游戏！
//真实的生物圈有着同样脆弱的性质！
//也许因为你消灭的那只Y就是最终导致Y种群灭绝的
//最后一根稻草！
//# define X 10
//# define Y 89
//int main()
//{
//	long int x = 0;
//	long int y = Y;
//	long int z = X;
//	float i = 0.5;
//	for (i = 0.5; i <= 60.0; i += 0.5)
//	{
//		if (((int)i % 3 == 0) && (i > (int)i))
//		{
//			x += z;
//			y -= x;
//			z = 0;
//		}
//		 if (((int)i % 3 != 0) && (i > (int)i))
//		{
//			y -= x;
//		}
//		 if ((int)i% 2 == 0&&(int)i==i)
//		{
//			y *= 2;
//		}
//		 if ((int)i % 3 == 0)
//		{
//			 z = x;
//		}
//	}
//	printf("%ld\n", y);
//}
//为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域
//（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。
//一共有 nn 张地毯，编号从 11 到 nn。现在将这些地毯按
//照编号从小到大的顺序平行于坐标轴先后铺设
//，后铺的地毯覆盖在前面已经铺好的地毯之上。
//地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的
//那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点
//也算被地毯覆盖。
//输入共 n + 2n + 2 行。
//第一行，一个整数 nn，表示总共有 nn 张地毯。
//接下来的 nn 行中，第 i + 1i + 1 行表示编号 ii 的地毯的信息
//，包含四个整数 a, b, g, ka, b, g, k，
//每两个整数之间用一个空格隔开，
//分别表示铺设地毯的左下角的坐标(a, b)(a, b)
//以及地毯在 xx 轴和 yy 轴方向的长度。
//第 n + 2n + 2 行包含两个整数 xx 和 yy
//，表示所求的地面的点的坐标(x, y)(x, y)。
//输出共 11 行，一个整数，表示所求的地毯的编号；
//若此处没有被地毯覆盖则输出 - 1。
struct tanzi {
	int x_l;
	int x_r;
	int y_d;
	int y_u;
}arr[100000];
int main()
{
	int n = 0;
	scanf("%d", &n);
	int i = 1;
	for (i = 1; i <= n; i++)
	{
		int a, b, c, d = 0;
		scanf("%d%d%d%d", &a, &b, &c, &d);
		arr[i].x_l = a;
		arr[i].x_r = a + c;
		arr[i].y_d = b;
		arr[i].y_u = b + d;
	}
	int x, y = 0;
	scanf("%d%d", &x, &y);
	int j = 0;
	for (j = n; j >= 1; j--)
	{
		if ((arr[j].x_l <= x && x <= arr[j].x_r) && (arr[j].y_d <= y && y <= arr[j].y_u))
		{
			printf("%d\n",j);
				break;
		}
	}
	if (j == 0)
		printf("-1\n");
	return 0;
}
